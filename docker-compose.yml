services:
  db:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    networks:
      - Backend-Net

  backend:
    container_name: Backend
    build:
      context: .
    volumes:
      - static_volume:/Backend/static
    ports:
      - "8000:8000"
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.dev
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      CELERY_BROKER_URL: amqp://guest:guest@rabbitmq:5672//
    networks:
      - Backend-Net
    restart: always
    command: >
      sh -c "python wait_mysql.py &&
            python manage.py collectstatic --noinput &&
            python manage.py makemigrations &&
            python manage.py migrate &&
            gunicorn --bind 0.0.0.0:8000 config.wsgi:application --timeout 300"
    labels:
      - "traefik.enable=true"
      # HTTP 라우터
      - "traefik.http.routers.backend.rule=Host(`techeerfashion.shop`) || Host(`www.techeerfashion.shop`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.service=backend_service"
      - "traefik.http.services.backend_service.loadbalancer.server.port=8000"
      # HTTPS 라우터
      - "traefik.http.routers.backend.rule=Host(`techeerfashion.shop`) || Host(`www.techeerfashion.shop`)"
      - "traefik.http.routers.backend-secure.entrypoints=websecure"
      - "traefik.http.routers.backend-secure.tls=true"
      - "traefik.http.routers.backend-secure.tls.certresolver=le"
      - "traefik.http.routers.backend-secure.service=backend_service"
      - "traefik.http.services.backend_service.loadbalancer.server.port=8000"
    privileged: true

  traefik:
    image: traefik:v2.10
    container_name: Board-Traefik
    command:
      # 대시보드(옵션)
      - "--api.insecure=true"
      # Docker provider 활성화
      - "--providers.docker=true"
      # HTTP entryPoint
      - "--entrypoints.web.address=:80"
      # HTTPS entryPoint
      - "--entrypoints.websecure.address=:443"
      # ACME (Let's Encrypt) 설정
      - "--certificatesresolvers.le.acme.email=ymkim2353@gmail.com"
      - "--certificatesresolvers.le.acme.storage=/acme.json"
      - "--certificatesresolvers.le.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./acme.json:/acme.json
    networks:
      - Backend-Net

  rabbitmq:
    image: "rabbitmq:3.13-management"
    container_name: rabbitmq
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - 5672:5672
      - 15672:15672
    depends_on:
      - backend
    restart: always
    tty: true
    expose:
      - 5672
    networks:
      - Backend-Net

  celery_worker:
    container_name: celery_worker
    build:
      context: .
    volumes:
      - ./:/app
    command: celery -A config worker --concurrency=4 --loglevel=info
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true
    networks:
      - Backend-Net

  celery_beat:
    container_name: celery_beat
    build:
      context: .
    volumes:
      - ./:/app
    command: celery -A config beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - DJANGO_SETTINGS_MODULE=config.settings.dev
    depends_on:
      - rabbitmq
      - backend
    restart: always
    tty: true
    networks:
      - Backend-Net
  
  flower:
    image: mher/flower
    container_name: flower
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - TZ=Asia/Seoul
    ports:
      - '5555:5555'
    depends_on:
      - rabbitmq
      - celery_worker
      - celery_beat
    networks:
      - Backend-Net

volumes:
  db_data:
  static_volume:

networks:
  Backend-Net:
    driver: bridge